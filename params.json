{"name":"DNL project","tagline":"Dynamic network loading model for MATLAB","body":"# Dynamic network loading package for MATLAB\r\n*algorithm by Ke Han | implementation by Gabriel Eve*\r\n\r\n### Table of contents\r\n* [Introduction](#introduction)\r\n* [Pre-processor](#pre-processor)\r\n* [Main program](#main-program)\r\n* [GUI](#graphical-display)\r\n* [References](#references)\r\n\r\n\r\n## Introduction\r\nThe package is an implementation of the dynamic network loading (DNL) model formulated as a system of differential algebraic equations proposed by (Han et al., 2014a). This model employs the classical LWR (Lighthill-Whitham-Richards) link dynamics and captures vehicle spillback.\r\n\r\n[[back](#table-of-contents \"Go to table of contents\")]\r\n\r\n## Pre-processor\r\nThe `create_network_properties.m` script loads a MAT file containing arrays `linkData` and `pathList` , and optional variables: `nodeCoordinates`, `networkName` and `fileName`. The required format of these inputs is described in each section below.\r\n\r\n### `linkData`\r\nArray of dimension [*m* x 5], where *m* is number of links in network. Contains information about each link (in rows).\r\n\r\n|          | Tail node | Head node | Capacity [veh/s] | Length [m] | Free flow time [s] |\r\n|----------|-----------|-----------|------------------|------------|--------------------|\r\n| link 1   |           |           |                  |            |                    |\r\n| link 2   |           |           |                  |            |                    |\r\n| link 3   |           |           |                  |            |                    |\r\n|          |           |           |                  |            |                    |\r\n| link *m* |           |           |                  |            |                    |\r\n\r\n### `pathList`\r\nArray of dimension [*p* x *k*_max] where *p* is the number of paths and *k* is the number of links in each path. *k*_max is the number of links in the longest path, and all paths with *k* < *k*_max must have trailing zeros. Examples shown below (path 1 has 2 links, path 2 has 3 links, and path 3 has *k*_max links):\r\n\r\n|          | 1st link | 2nd link | 3rd link | 4th link |   |   | *k*_max link|\r\n|----------|:--------:|:--------:|:--------:|:--------:|:-:|:-:|:-----------:|\r\n| path 1   |     4    |    3     |    0     |    0     |   |   |      0      |\r\n| path 2   |     1    |    2     |    8     |    0     |   |   |      0      |\r\n| path 3   |     8    |    5     |    4     |    7     |   |   |      2      |\r\n|          |          |          |          |          |   |   |             |\r\n| path *p* |     1    |    0     |    0     |    0     |   |   |      0      |\r\n\r\n\r\n### Optional inputs\r\n`networkName`: name of the network\r\n\r\n`fileName`: name to use for file outputs (must meet MATLAB's naming requirements)\r\n\r\n`nodeCoordinates`:\r\n\r\n|          | X | Y |\r\n|----------|---|---|\r\n| node 1   |   |   |\r\n| node 2   |   |   |\r\n| node 3   |   |   |\r\n|          |   |   |\r\n| node *n* |   |   |\r\n\r\n\r\n\r\n[[back](#table-of-contents \"Go to table of contents\")]\r\n\r\n## Main program\r\n\r\n[[back](#table-of-contents \"Go to table of contents\")]\r\n\r\n## Graphical display\r\n\r\n[[back](#table-of-contents \"Go to table of contents\")]\r\n\r\n## Versions\r\n\r\n[[back](#table-of-contents \"Go to table of contents\")]\r\n\r\n## References\r\n\r\nHan, K., Friesz, T.L., Yao, T., 2014a. Vehicle spillback on dynamic traffic networks and what it means for dynamic traffic assignment models. 5th International Symposium on Dynamic Traffic Assignment. Salerno, Italy, 17-19 June 2014.\r\n","google":"UA-59528370-2","note":"Don't delete this file! It's used internally to help with page regeneration."}